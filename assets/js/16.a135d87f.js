(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{493:function(a,s,t){"use strict";t.r(s);var e=t(4),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"题目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目"}},[a._v("#")]),a._v(" 题目")]),a._v(" "),t("blockquote",[t("p",[a._v("编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：")])]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("FirstName, LastName, City, State\n")])])]),t("p",[a._v("表1: Person")]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("+-------------+---------+\n| 列名         | 类型     |\n+-------------+---------+\n| PersonId    | int     |\n| FirstName   | varchar |\n| LastName    | varchar |\n+-------------+---------+\nPersonId 是上表主键\n")])])]),t("p",[a._v("表2: Address")]),a._v(" "),t("div",{staticClass:"language-md extra-class"},[t("pre",{pre:!0,attrs:{class:"language-md"}},[t("code",[a._v("+-------------+---------+\n| 列名         | 类型    |\n+-------------+---------+\n| AddressId   | int     |\n| PersonId    | int     |\n| City        | varchar |\n| State       | varchar |\n+-------------+---------+\nAddressId 是上表主键\n")])])]),t("h2",{attrs:{id:"分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析"}},[a._v("#")]),a._v(" 分析")]),a._v(" "),t("p",[a._v("此题可以用连接 "),t("code",[a._v("join")]),a._v(" 来做，数据库在通过连接两张或者多张表来返回记录时，会产生一张临时表，然后再将临时表返回给用户，在使用"),t("code",[a._v("left join")]),a._v(" 时， "),t("code",[a._v("where")]),a._v(" 和 "),t("code",[a._v("on")]),a._v(" 区别如下：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("on")]),a._v(" 时在生成临时表时生成的条件，它不管on中的条件是否为真，都会返回左表记录")]),a._v(" "),t("li",[t("code",[a._v("where")]),a._v(" 是在生成临时表后进行过滤，这时候没有 "),t("code",[a._v("left join")]),a._v(" 的含义了，条件不符合的全部过滤掉")])]),a._v(" "),t("h2",{attrs:{id:"代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[a._v("#")]),a._v(" 代码")]),a._v(" "),t("div",{staticClass:"language-sql extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("SELECT")]),a._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("FirstName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("LastName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("City"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("State\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("FROM")]),a._v(" Person "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" p "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("LEFT")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("JOIN")]),a._v(" Address "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("as")]),a._v(" a "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("ON")]),a._v(" p"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("PersonId "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("PersonId"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);